// proto/crypto/blake3.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/proto/crypto.proto

package crypto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Blake3Service_Hash_FullMethodName              = "/crypto.Blake3Service/Hash"
	Blake3Service_Verify_FullMethodName            = "/crypto.Blake3Service/Verify"
	Blake3Service_StreamHash_FullMethodName        = "/crypto.Blake3Service/StreamHash"
	Blake3Service_StreamVerify_FullMethodName      = "/crypto.Blake3Service/StreamVerify"
	Blake3Service_CreateCertificate_FullMethodName = "/crypto.Blake3Service/CreateCertificate"
	Blake3Service_VerifyCertificate_FullMethodName = "/crypto.Blake3Service/VerifyCertificate"
)

// Blake3ServiceClient is the client API for Blake3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main Blake3 service
type Blake3ServiceClient interface {
	// Standard hash operation
	Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
	// Verify hash
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	// Streaming operations
	StreamHash(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HashRequest, HashResponse], error)
	StreamVerify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VerifyRequest, VerifyResponse], error)
	// Certificate operations
	CreateCertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	VerifyCertificate(ctx context.Context, in *CertificateVerifyRequest, opts ...grpc.CallOption) (*CertificateVerifyResponse, error)
}

type blake3ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlake3ServiceClient(cc grpc.ClientConnInterface) Blake3ServiceClient {
	return &blake3ServiceClient{cc}
}

func (c *blake3ServiceClient) Hash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, Blake3Service_Hash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blake3ServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, Blake3Service_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blake3ServiceClient) StreamHash(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HashRequest, HashResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Blake3Service_ServiceDesc.Streams[0], Blake3Service_StreamHash_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HashRequest, HashResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blake3Service_StreamHashClient = grpc.BidiStreamingClient[HashRequest, HashResponse]

func (c *blake3ServiceClient) StreamVerify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VerifyRequest, VerifyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Blake3Service_ServiceDesc.Streams[1], Blake3Service_StreamVerify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VerifyRequest, VerifyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blake3Service_StreamVerifyClient = grpc.BidiStreamingClient[VerifyRequest, VerifyResponse]

func (c *blake3ServiceClient) CreateCertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, Blake3Service_CreateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blake3ServiceClient) VerifyCertificate(ctx context.Context, in *CertificateVerifyRequest, opts ...grpc.CallOption) (*CertificateVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertificateVerifyResponse)
	err := c.cc.Invoke(ctx, Blake3Service_VerifyCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Blake3ServiceServer is the server API for Blake3Service service.
// All implementations must embed UnimplementedBlake3ServiceServer
// for forward compatibility.
//
// Main Blake3 service
type Blake3ServiceServer interface {
	// Standard hash operation
	Hash(context.Context, *HashRequest) (*HashResponse, error)
	// Verify hash
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	// Streaming operations
	StreamHash(grpc.BidiStreamingServer[HashRequest, HashResponse]) error
	StreamVerify(grpc.BidiStreamingServer[VerifyRequest, VerifyResponse]) error
	// Certificate operations
	CreateCertificate(context.Context, *CertificateRequest) (*CertificateResponse, error)
	VerifyCertificate(context.Context, *CertificateVerifyRequest) (*CertificateVerifyResponse, error)
	mustEmbedUnimplementedBlake3ServiceServer()
}

// UnimplementedBlake3ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlake3ServiceServer struct{}

func (UnimplementedBlake3ServiceServer) Hash(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hash not implemented")
}
func (UnimplementedBlake3ServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedBlake3ServiceServer) StreamHash(grpc.BidiStreamingServer[HashRequest, HashResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHash not implemented")
}
func (UnimplementedBlake3ServiceServer) StreamVerify(grpc.BidiStreamingServer[VerifyRequest, VerifyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamVerify not implemented")
}
func (UnimplementedBlake3ServiceServer) CreateCertificate(context.Context, *CertificateRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (UnimplementedBlake3ServiceServer) VerifyCertificate(context.Context, *CertificateVerifyRequest) (*CertificateVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCertificate not implemented")
}
func (UnimplementedBlake3ServiceServer) mustEmbedUnimplementedBlake3ServiceServer() {}
func (UnimplementedBlake3ServiceServer) testEmbeddedByValue()                       {}

// UnsafeBlake3ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Blake3ServiceServer will
// result in compilation errors.
type UnsafeBlake3ServiceServer interface {
	mustEmbedUnimplementedBlake3ServiceServer()
}

func RegisterBlake3ServiceServer(s grpc.ServiceRegistrar, srv Blake3ServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlake3ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Blake3Service_ServiceDesc, srv)
}

func _Blake3Service_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blake3ServiceServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blake3Service_Hash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blake3ServiceServer).Hash(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blake3Service_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blake3ServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blake3Service_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blake3ServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blake3Service_StreamHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Blake3ServiceServer).StreamHash(&grpc.GenericServerStream[HashRequest, HashResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blake3Service_StreamHashServer = grpc.BidiStreamingServer[HashRequest, HashResponse]

func _Blake3Service_StreamVerify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Blake3ServiceServer).StreamVerify(&grpc.GenericServerStream[VerifyRequest, VerifyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blake3Service_StreamVerifyServer = grpc.BidiStreamingServer[VerifyRequest, VerifyResponse]

func _Blake3Service_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blake3ServiceServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blake3Service_CreateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blake3ServiceServer).CreateCertificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blake3Service_VerifyCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blake3ServiceServer).VerifyCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blake3Service_VerifyCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blake3ServiceServer).VerifyCertificate(ctx, req.(*CertificateVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blake3Service_ServiceDesc is the grpc.ServiceDesc for Blake3Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blake3Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto.Blake3Service",
	HandlerType: (*Blake3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hash",
			Handler:    _Blake3Service_Hash_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Blake3Service_Verify_Handler,
		},
		{
			MethodName: "CreateCertificate",
			Handler:    _Blake3Service_CreateCertificate_Handler,
		},
		{
			MethodName: "VerifyCertificate",
			Handler:    _Blake3Service_VerifyCertificate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHash",
			Handler:       _Blake3Service_StreamHash_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamVerify",
			Handler:       _Blake3Service_StreamVerify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/crypto.proto",
}
